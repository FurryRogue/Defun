(* **************************************************** *)
(*               Original program                       *)
(* **************************************************** *)

(*
let f =
  (fun fn' x =
    (x 1))
in
  let g =
    f
  in
    let h =
      g
    in
      let f =
        (h (fun fn' x =
          succ(x)))
      in
        f
*)

(* **************************************************** *)
(*               Evaluated to                           *)
(* **************************************************** *)

(* 2 *)

(* **************************************************** *)
(*        Basic operations on natural numbers           *)
(* **************************************************** *)

type nat     = int
fun  pred(n) = if n <> 0 then n - 1 else 0
fun  succ(n) = n + 1

(* **************************************************** *)
(*             Type constructors                        *)
(* **************************************************** *)

datatype lam =
    fn''0
  | fn''1
  | dead_code

(* **************************************************** *)
(*             Apply functions                          *)
(* **************************************************** *)

fun app'fn''0 (fn''0, x) =
     app'fn''1(x, 1)

and app'fn''1 (fn''1, x) =
     (succ(x))

(* **************************************************** *)
(*             Tranformed expression                    *)
(* **************************************************** *)

val result' =
  let val f'0 =
    fn''0
  in
    let val g'0 =
      f'0
    in
      let val h'0 =
        g'0
      in
        let val f'1 =
          app'fn''0(h'0, fn''1)
        in
          f'1
        end
      end
    end
  end

(* **************************************************** *)
(*             End of transformation                    *)
(* **************************************************** *)
