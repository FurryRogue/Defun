(* **************************************************** *)
(*               Original program                       *)
(* **************************************************** *)

(*
let f =
  (fun fn' x =
    (x 1))
in
  let g =
    f
  in
    let h =
      g
    in
      let f =
        (h (fun fn' x =
          succ(x)))
      in
        f
*)

(* **************************************************** *)
(*               Evaluated to                           *)
(* **************************************************** *)

(* 2 *)

(* **************************************************** *)
(*        Basic operations on natural numbers           *)
(* **************************************************** *)

type nat     = int
fun  pred(n) = if n <> 0 then n - 1 else 0
fun  succ(n) = n + 1

(* **************************************************** *)
(*             Type constructors                        *)
(* **************************************************** *)

datatype fun''natnat'nat' =
    fn''1

and      fun'natnat' =
    fn''2

(* **************************************************** *)
(*             Apply functions                          *)
(* **************************************************** *)

fun app''natnat'nat' (fn''1, x) =
     app'natnat'(x, 1)

and app'natnat' (fn''2, x) =
     (succ(x))

(* **************************************************** *)
(*             Tranformed expression                    *)
(* **************************************************** *)

val result' =
  let val f =
    fn''1
  in
    let val g =
      f
    in
      let val h =
        g
      in
        let val f =
          app''natnat'nat'(h, fn''2)
        in
          f
        end
      end
    end
  end

(* **************************************************** *)
(*             End of transformation                    *)
(* **************************************************** *)
