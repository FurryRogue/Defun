(* **************************************************** *)
(*               Original program                       *)
(* **************************************************** *)

(*
let f0 =
  (fun g0 f =
    (fun h0 x =
      (f x)))
in
  let f1 =
    (fun g1 y =
      succ(y))
  in
    ((f0 f1) 10)
*)

(* **************************************************** *)
(*               Evaluated to                           *)
(* **************************************************** *)

(* 11 *)

(* **************************************************** *)
(*        Basic operations on natural numbers           *)
(* **************************************************** *)

type nat     = int
fun  pred(n) = if n <> 0 then n - 1 else 0
fun  succ(n) = n + 1

(* **************************************************** *)
(*             Type constructors                        *)
(* **************************************************** *)

datatype fun'natnat' =
    g1'1
  | h0'1 of (fun'natnat')

and      fun''natnat''natnat'' =
    g0'1

(* **************************************************** *)
(*             Apply functions                          *)
(* **************************************************** *)

fun app'natnat' (g1'1, y) =
     (succ(y))
  | app'natnat' (h0'1(f), x) =
     app'natnat'(f, x)

and app''natnat''natnat'' (g0'1, f) =
     h0'1(f)

(* **************************************************** *)
(*             Tranformed expression                    *)
(* **************************************************** *)

val result' =
  let val f0 =
    g0'1
  in
    let val f1 =
      g1'1
    in
      app'natnat'(app''natnat''natnat''(f0, f1), 10)
    end
  end

(* **************************************************** *)
(*             End of transformation                    *)
(* **************************************************** *)
