(* **************************************************** *)
(*               Original program                       *)
(* **************************************************** *)

(*
let f0 =
  (fun g0 f =
    (fun h0 x =
      (f x)))
in
  let f1 =
    (fun g1 y =
      succ(y))
  in
    ((f0 f1) 10)
*)

(* **************************************************** *)
(*               Evaluated to                           *)
(* **************************************************** *)

(* 11 *)

(* **************************************************** *)
(*        Basic operations on natural numbers           *)
(* **************************************************** *)

type nat     = int
fun  pred(n) = if n <> 0 then n - 1 else 0
fun  succ(n) = n + 1

(* **************************************************** *)
(*             Type constructors                        *)
(* **************************************************** *)

datatype lam =
    g0'0
  | g1'0
  | h0'0 of (lam)
  | dead_code

(* **************************************************** *)
(*             Apply functions                          *)
(* **************************************************** *)

fun app'g0'0 (g0'0, f) =
     h0'0(f)

and app'g1'0 (g1'0, y) =
     (succ(y))

and app'h0'0 (h0'0(f), x) =
     app'g1'0(f, x)

(* **************************************************** *)
(*             Tranformed expression                    *)
(* **************************************************** *)

val result' =
  let val f0'0 =
    g0'0
  in
    let val f1'0 =
      g1'0
    in
      app'h0'0(app'g0'0(f0'0, f1'0), 10)
    end
  end

(* **************************************************** *)
(*             End of transformation                    *)
(* **************************************************** *)
